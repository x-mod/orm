{{define "table.index"}}{{- $index := . -}}
type {{$index.Name}}Index struct{
	{{- range $field := $index.Fields}}
    {{$field.Name}}  {{$field.Type "golang"}} 
    {{- end}}
}

func (m *_{{$index.Table.Name}}Mgr) New{{$index.Name}}Index() *{{$index.Name}}Index {
		return &{{$index.Name}}Index{}
}

func (u *{{$index.Name}}Index) SQLFormat() []string {
	return []string{
		{{- range $j, $field := $index.Fields}}
		"{{$field.DBColumn}} = ?",
		{{- end}}
	}
}

func (u *{{$index.Name}}Index) SQLParams() []interface{} {
	return []interface{}{
		{{- range $j, $field := $index.Fields}}
			{{- if $field.IsPassword}}
			Password(u.{{$field.Value}}),       
			{{- else if $field.IsEncode}}
			Encoder.Encode(u.{{$field.Value}}),
			{{- else }}
			u.{{$field.Value}},
			{{- end}}
		{{- end}}
	}
}

func (u *{{$index.Name}}Index) DBColumns() []string {
	return []string{
		{{- range $j, $field := $index.Fields}}
		"{{$field.DBColumn}}",
		{{- end}}
	}
}
{{end}}