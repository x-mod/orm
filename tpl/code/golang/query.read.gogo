{{define "query.read"}}{{- $obj := . -}}
func (m *_{{$obj.Name}}DBMgr) QueryContext(ctx context.Context, q string, args ... interface{}) ([]*{{$obj.Name}}, error) {
	rows, err := m.db.QueryContext(ctx, q, args...)	
	if err != nil {
		return nil, fmt.Errorf("query (%s %v): %w", q, args, err)
	}
	defer rows.Close()

	objs := []*{{$obj.Name}}{}
	for rows.Next() {
		var obj {{$obj.Name}}

		{{- range $index, $field := $obj.Fields}}
			{{- if $field.IsTime }}
			var {{$field.Name}} int64
			{{- else if $field.IsNullable}}
			var {{$field.Name}} {{$field.SQLNullType}}
			{{- end }}
		{{- end }}

		err = rows.Scan(
		{{- range $index, $field := $obj.Fields -}}
			{{- if or $field.IsTime $field.IsNullable}}
			&{{$field.Name}},
			{{- else -}}
			&(obj.{{$field.Name}}),
			{{- end -}}			
		{{- end -}}
		)
		if err != nil {
			return nil, err
		}

		{{range $index, $field := $obj.Fields}}
			{{- if $field.IsTime }}
				tm{{$field.Name}} := time.Unix({{$field.Name}}, 0)	
				{{- if $field.IsNullable }}
				obj.{{$field.Name}} = &tm{{$field.Name}}
				{{- else}}
				obj.{{$field.Name}} = tm{{$field.Name}}
				{{- end}}
			{{- else if $field.IsNullable}}
				if {{$field.Name}}.Valid {
					obj.{{$field.Name}} = {{$field.Type "golang"}}({{$field.Name}}.{{$field.SQLNullValueField}})
				}
			{{- end }}			
			{{- if $field.IsEncode}}
			obj.{{$field.Name}} = Encoder.Decode(obj.{{$field.Name}})
			{{- end}}
		{{- end}}

		objs = append(objs, &obj)
	}
	return objs, nil
}

func (m *_{{$obj.Name}}DBMgr) CountContext(ctx context.Context, q string, args ... interface{}) (int64, error) {
	rows, err := m.db.QueryContext(ctx, q, args...)	
	if err != nil {
		return 0, fmt.Errorf("query (%s %v): %w", q, args, err)
	}
	defer rows.Close()

	var count int64
	for rows.Next() {
		if err = rows.Scan(&count); err != nil {
			return 0, err
		}
		break
	}
	return count, nil
}
{{end}}